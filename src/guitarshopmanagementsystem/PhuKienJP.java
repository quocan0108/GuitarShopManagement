/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package guitarshopmanagementsystem;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.UUID;

import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author quoca
 */
public class PhuKienJP extends javax.swing.JPanel {

    /**
     * Creates new form PhuKienJP
     */
    
    
    public PhuKienJP() {
        initComponents();
        try {
        	Connection con = JDBCConnection.getJDBCConnection();
            String sql = "select * from products where type = 'Phụ kiện'"; 
            PreparedStatement ps = con.prepareCall(sql);
            ResultSet rs = ps.executeQuery();
            
            DefaultTableModel model = new DefaultTableModel();
            
            ResultSetMetaData rsmd = rs.getMetaData();
			int socot = rsmd.getColumnCount();
			for(int j = 1; j <= socot; j++) {
				model.addColumn(rsmd.getColumnLabel(j));
			}
			
			while(rs.next()) {
				Object[] row = new Object[socot];
				for(int i = 1; i <= socot; i++) {
					row[i - 1] = rs.getObject(i);
				}
				model.addRow(row);
			}
			tbPhuKien.setModel(model);
			tbPhuKien.setVisible(true);
	
    	} catch(Exception e) {}             
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        rbBaoDan = new javax.swing.JRadioButton();
        rbDayDeo = new javax.swing.JRadioButton();
        rbEQ = new javax.swing.JRadioButton();
        rbPick = new javax.swing.JRadioButton();
        rbDayDan = new javax.swing.JRadioButton();
        rbCapo = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbPhuKien = new javax.swing.JTable();
        ButtonGroup group = new ButtonGroup();
        group.add(rbBaoDan);
        group.add(rbCapo);
        group.add(rbDayDan);
        group.add(rbDayDeo);
        group.add(rbEQ);
        group.add(rbPick);
        
        
        
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("PHỤ KIỆN");
        jLabel1.setName(""); // NOI18N
        jLabel1.setPreferredSize(null);

        btnTimKiem.setText("Tìm kiếm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        rbBaoDan.setText("Bao đàn");
        rbBaoDan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBaoDanActionPerformed(evt);
            }
        });

        rbDayDeo.setText("Dây đeo");
        rbDayDeo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDayDeoActionPerformed(evt);
            }
        });

        rbEQ.setText("EQ");
        rbEQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEQActionPerformed(evt);
            }
        });

        rbPick.setText("Pick");
        rbPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPickActionPerformed(evt);
            }
        });

        rbDayDan.setText("Dây đàn");
        rbDayDan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDayDanActionPerformed(evt);
            }
        });

        rbCapo.setText("Capo");
        rbCapo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCapoActionPerformed(evt);
            }
        });

        tbPhuKien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Tên", "Giá", "Còn hàng", "Loại"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbPhuKien);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(154, Short.MAX_VALUE)
                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTimKiem)
                .addGap(146, 146, 146))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(rbCapo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbDayDan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbPick)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbEQ)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbDayDeo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbBaoDan)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTimKiem))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCapo)
                    .addComponent(rbBaoDan)
                    .addComponent(rbDayDan)
                    .addComponent(rbPick)
                    .addComponent(rbEQ)
                    .addComponent(rbDayDeo))
                .addGap(42, 42, 42)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        // TODO add your handling code here:
        String s = txtTimKiem.getText();
        if(!s.isEmpty()){
            s = "%"+s+"%";
            System.out.println(s);
            try {
            	Connection con = JDBCConnection.getJDBCConnection();
                String sql = "select * from products where type = 'Phụ kiện' and name like ?;";
                PreparedStatement ps2 = con.prepareStatement(sql);
                ps2.setString(1, s);

                ResultSet rs = ps2.executeQuery();

                if (!rs.next()) {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy sản phẩm!");
                } else {
                    DefaultTableModel model = new DefaultTableModel();

                    ResultSetMetaData rsmd = rs.getMetaData();
                    int socot = rsmd.getColumnCount();
                    for(int j = 1; j <= socot; j++) {
                        model.addColumn(rsmd.getColumnLabel(j));
                    }
                    do {
                        Object[] row = new Object[socot];
                        for(int i = 1; i <= socot; i++) {
                            row[i - 1] = rs.getObject(i);
                        }
                        model.addRow(row);
                    } while (rs.next());
                    tbPhuKien.setModel(model);
                    tbPhuKien.setVisible(true);
                }
            } catch(Exception e) {}
        }
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void rbCapoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCapoActionPerformed
        // TODO add your handling code here:
        try {
        	Connection con = JDBCConnection.getJDBCConnection();
            String sql = "select * from products where type = 'Phụ kiện' and name like '%CAPO%';";
            PreparedStatement ps = con.prepareCall(sql);
            ResultSet rs = ps.executeQuery();
            
            DefaultTableModel model = new DefaultTableModel();
            
            ResultSetMetaData rsmd = rs.getMetaData();
			int socot = rsmd.getColumnCount();
			for(int j = 1; j <= socot; j++) {
				model.addColumn(rsmd.getColumnLabel(j));
			}
			
			while(rs.next()) {
				Object[] row = new Object[socot];
				for(int i = 1; i <= socot; i++) {
					row[i - 1] = rs.getObject(i);
				}
				model.addRow(row);
			}
			tbPhuKien.setModel(model);
			tbPhuKien.setVisible(true);
	
    	} catch(Exception e) {}   
    }//GEN-LAST:event_rbCapoActionPerformed

    private void rbDayDanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDayDanActionPerformed
        // TODO add your handling code here:
        try {
        	Connection con = JDBCConnection.getJDBCConnection();
            String sql = "select * from products where type = 'Phụ kiện' and name like '%STRING%';";
            PreparedStatement ps = con.prepareCall(sql);
            ResultSet rs = ps.executeQuery();
            
            DefaultTableModel model = new DefaultTableModel();
            
            ResultSetMetaData rsmd = rs.getMetaData();
			int socot = rsmd.getColumnCount();
			for(int j = 1; j <= socot; j++) {
				model.addColumn(rsmd.getColumnLabel(j));
			}
			
			while(rs.next()) {
				Object[] row = new Object[socot];
				for(int i = 1; i <= socot; i++) {
					row[i - 1] = rs.getObject(i);
				}
				model.addRow(row);
			}
			tbPhuKien.setModel(model);
			tbPhuKien.setVisible(true);
	
    	} catch(Exception e) {}  
    }//GEN-LAST:event_rbDayDanActionPerformed

    private void rbPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPickActionPerformed
        // TODO add your handling code here:
        try {
        	Connection con = JDBCConnection.getJDBCConnection();
            String sql = "select * from products where type = 'Phụ kiện' and name like '%PICK%';";
            PreparedStatement ps = con.prepareCall(sql);
            ResultSet rs = ps.executeQuery();
            
            DefaultTableModel model = new DefaultTableModel();
            
            ResultSetMetaData rsmd = rs.getMetaData();
			int socot = rsmd.getColumnCount();
			for(int j = 1; j <= socot; j++) {
				model.addColumn(rsmd.getColumnLabel(j));
			}
			
			while(rs.next()) {
				Object[] row = new Object[socot];
				for(int i = 1; i <= socot; i++) {
					row[i - 1] = rs.getObject(i);
				}
				model.addRow(row);
			}
			tbPhuKien.setModel(model);
			tbPhuKien.setVisible(true);
	
    	} catch(Exception e) {}  
    }//GEN-LAST:event_rbPickActionPerformed

    private void rbEQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEQActionPerformed
        // TODO add your handling code here:
        try {
        	Connection con = JDBCConnection.getJDBCConnection();
            String sql = "select * from products where type = 'Phụ kiện' and name like '%EQ%';";
            PreparedStatement ps = con.prepareCall(sql);
            ResultSet rs = ps.executeQuery();
            
            DefaultTableModel model = new DefaultTableModel();
            
            ResultSetMetaData rsmd = rs.getMetaData();
			int socot = rsmd.getColumnCount();
			for(int j = 1; j <= socot; j++) {
				model.addColumn(rsmd.getColumnLabel(j));
			}
			
			while(rs.next()) {
				Object[] row = new Object[socot];
				for(int i = 1; i <= socot; i++) {
					row[i - 1] = rs.getObject(i);
				}
				model.addRow(row);
			}
			tbPhuKien.setModel(model);
			tbPhuKien.setVisible(true);
	
    	} catch(Exception e) {}  
    }//GEN-LAST:event_rbEQActionPerformed

    private void rbDayDeoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDayDeoActionPerformed
        // TODO add your handling code here:
        try {
        	Connection con = JDBCConnection.getJDBCConnection();
            String sql = "select * from products where type = 'Phụ kiện' and name like '%DÂY ĐEO%';";
            PreparedStatement ps = con.prepareCall(sql);
            ResultSet rs = ps.executeQuery();
            
            DefaultTableModel model = new DefaultTableModel();
            
            ResultSetMetaData rsmd = rs.getMetaData();
			int socot = rsmd.getColumnCount();
			for(int j = 1; j <= socot; j++) {
				model.addColumn(rsmd.getColumnLabel(j));
			}
			
			while(rs.next()) {
				Object[] row = new Object[socot];
				for(int i = 1; i <= socot; i++) {
					row[i - 1] = rs.getObject(i);
				}
				model.addRow(row);
			}
			tbPhuKien.setModel(model);
			tbPhuKien.setVisible(true);
	
    	} catch(Exception e) {}  
    }//GEN-LAST:event_rbDayDeoActionPerformed

    private void rbBaoDanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBaoDanActionPerformed
        // TODO add your handling code here:
        try {
        	Connection con = JDBCConnection.getJDBCConnection();
            String sql = "select * from products where type = 'Phụ kiện' and name like '%BAO ĐÀN%';";
            PreparedStatement ps = con.prepareCall(sql);
            ResultSet rs = ps.executeQuery();
            
            DefaultTableModel model = new DefaultTableModel();
            
            ResultSetMetaData rsmd = rs.getMetaData();
			int socot = rsmd.getColumnCount();
			for(int j = 1; j <= socot; j++) {
				model.addColumn(rsmd.getColumnLabel(j));
			}
			
			while(rs.next()) {
				Object[] row = new Object[socot];
				for(int i = 1; i <= socot; i++) {
					row[i - 1] = rs.getObject(i);
				}
				model.addRow(row);
			}
			tbPhuKien.setModel(model);
			tbPhuKien.setVisible(true);
	
    	} catch(Exception e) {}  
    }//GEN-LAST:event_rbBaoDanActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbBaoDan;
    private javax.swing.JRadioButton rbCapo;
    private javax.swing.JRadioButton rbDayDan;
    private javax.swing.JRadioButton rbDayDeo;
    private javax.swing.JRadioButton rbEQ;
    private javax.swing.JRadioButton rbPick;
    private javax.swing.JTable tbPhuKien;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
}
